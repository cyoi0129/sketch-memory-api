package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.56

import (
	"context"
	"fmt"
	"sketch/db"
	"sketch/graph/model"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	panic(fmt.Errorf("not implemented: CreateUser - createUser"))
}

// CreateItem is the resolver for the createItem field.
func (r *mutationResolver) CreateItem(ctx context.Context, input model.NewItem) (*model.Item, error) {
	panic(fmt.Errorf("not implemented: CreateItem - createItem"))
}

// CreateAuthor is the resolver for the createAuthor field.
func (r *mutationResolver) CreateAuthor(ctx context.Context, input model.NewAuthor) (*model.Author, error) {
	panic(fmt.Errorf("not implemented: CreateAuthor - createAuthor"))
}

// CreateTag is the resolver for the createTag field.
func (r *mutationResolver) CreateTag(ctx context.Context, input model.NewTag) (*model.Tag, error) {
	panic(fmt.Errorf("not implemented: CreateTag - createTag"))
}

// CreateReview is the resolver for the createReview field.
func (r *mutationResolver) CreateReview(ctx context.Context, input model.NewReview) (*model.Review, error) {
	data, err := db.CreateReview(input)
	fmt.Println(err)
	return data, err
	// panic(fmt.Errorf("not implemented: CreateReview - createReview"))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	data, err := db.FetchUserList()
	fmt.Println(err)
	return data, err
	// panic(fmt.Errorf("not implemented: Users - users"))
}

// Items is the resolver for the items field.
func (r *queryResolver) Items(ctx context.Context) ([]*model.Item, error) {
	data, err := db.FetchItemList()
	fmt.Println(err)
	return data, err
	// panic(fmt.Errorf("not implemented: Items - items"))
}

// Authors is the resolver for the authors field.
func (r *queryResolver) Authors(ctx context.Context) ([]*model.Author, error) {
	data, err := db.FetchAuthorList()
	fmt.Println(err)
	return data, err
	// panic(fmt.Errorf("not implemented: Authors - authors"))
}

// Tags is the resolver for the tags field.
func (r *queryResolver) Tags(ctx context.Context) ([]*model.Tag, error) {
	data, err := db.FetchTagList()
	fmt.Println(err)
	return data, err
	// panic(fmt.Errorf("not implemented: Tags - tags"))
}

// Reviews is the resolver for the reviews field.
func (r *queryResolver) Reviews(ctx context.Context) ([]*model.Review, error) {
	data, err := db.FetchReviewList()
	fmt.Println(err)
	return data, err
	// panic(fmt.Errorf("not implemented: Reviews - reviews"))
}

// Item is the resolver for the item field.
func (r *queryResolver) Item(ctx context.Context, id string) (*model.Item, error) {
	data, err := db.FetchItemById(id)
	fmt.Println(err)
	return data, err
	// panic(fmt.Errorf("not implemented: Item - item"))
}

// Tag is the resolver for the tag field.
func (r *queryResolver) Tag(ctx context.Context, id string) (*model.Tag, error) {
	data, err := db.FetchTagById(id)
	fmt.Println(err)
	return data, err
	// panic(fmt.Errorf("not implemented: Tag - tag"))
}

// Author is the resolver for the author field.
func (r *queryResolver) Author(ctx context.Context, id string) (*model.Author, error) {
	data, err := db.FetchAuthorById(id)
	fmt.Println(err)
	return data, err
	// panic(fmt.Errorf("not implemented: Author - author"))
}

// TagItems is the resolver for the tagItems field.
func (r *queryResolver) TagItems(ctx context.Context, tag string) ([]*model.Item, error) {
	data, err := db.FetchItemByTag(tag)
	fmt.Println(err)
	return data, err
	// panic(fmt.Errorf("not implemented: TagItems - tagItems"))
}

// AuthorItems is the resolver for the authorItems field.
func (r *queryResolver) AuthorItems(ctx context.Context, author string) ([]*model.Item, error) {
	data, err := db.FetchItemByAuthor(author)
	fmt.Println(err)
	return data, err
	// panic(fmt.Errorf("not implemented: AuthorItems - authorItems"))
}

// ItemReviews is the resolver for the itemReviews field.
func (r *queryResolver) ItemReviews(ctx context.Context, item string) ([]*model.Review, error) {
	data, err := db.FetchReviewByItem(item)
	fmt.Println(err)
	return data, err
	// panic(fmt.Errorf("not implemented: ItemReviews - itemReviews"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
